apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: restrictedtainttoleration
  labels:
    {{- include "gatekeeper.labels" . | nindent 4 }}
spec:
  crd:
    spec:
      names:
        kind: RestrictedTaintToleration
      validation:
        openAPIV3Schema:
          type: object
          properties:
            restrictedTaint:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
                effect:
                  type: string
              required:
              - key
              - value
              - effect
            allowGlobalToleration:
              type: boolean
            excludedResources:
              type: array
              items:
                type: string
          required:
          - restrictedTaint
          - allowGlobalToleration
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package restrictedtainttoleration

        # Global assignments
        pod := input.review.object
        tolerations := pod.spec.tolerations
        taint := input.parameters.restrictedTaint

        # This comprehension creates an array with an entry for
        # each matching toleration in the tolerations array
        matching_tolerations := [match | match := toleration_match(tolerations[_])]

        # A toleration with no key matches all taints
        global_tolerations := [key | k := object.get(tolerations[_], "key", "")
                                     k == ""
                                     key := k]

        default allow_global = false
        allow_global {
          input.parameters.allowGlobalToleration == true
        }

        included(resourceName, exclusions) = true {
          patterns := {pattern | exclusion := exclusions[_]; pattern := sprintf("^%v$", [exclusion])}
          resource := concat("/", [input.review.object.metadata.namespace, resourceName])
          matches := {match | match := patterns[_]; true == regex.match(match, resource)}
          count(matches) == 0
        }

        # Fail if matching toleration exists
        violation[{"msg": msg}] {
          included(pod.metadata.name, input.parameters.excludedResources)
          count(global_tolerations) == 0
          count(matching_tolerations) > 0
          msg := sprintf("Toleration is not allowed for taint %v", [taint])
        }

        # Fail if global toleration exists and we disallow global tolerations for
        # this taint
        violation[{"msg": msg}] {
          included(pod.metadata.name, input.parameters.excludedResources)
          count(global_tolerations) > 0
          not allow_global
          msg := sprintf("Global tolerations not allowed for taint %v", [taint])
        }

        # Functions to test if pod toleration matches the taint
        toleration_match(toleration) {
          key := object.get(toleration, "key", "")
          key == taint.key
          effect := object.get(toleration, "effect", "")
          effect_check(effect)
          operator := object.get(toleration, "operator", "Equal")
          operator_check(toleration, operator)
        }

        # Functions can be defined multiple times, matching against non-variable args
        # This acts as a conditional

        # If effect is empty, match any
        effect_check("") {
          true
        }

        # Otherwise, specific effect must match
        effect_check(effect) {
          effect == taint.effect
        }

        # When the toleration operator is "Equal" we need to match value fields
        operator_check(toleration, "Equal") {
          value := object.get(toleration, "value", "")
          value == taint.value
        }

        # When the toleration operator is "Exists", the match is always true
        # because we already matched on key and effect
        operator_check(toleration, "Exists") {
          true
        }
